#!/usr/bin/env zsh
source ${0:A:h}/../../deploy
source env.bash

# TODO Install latest stable node version to be set as global
install() {
  [[ $(_os) == macos ]] && brew install node
}

link() {
  # List of default packages that will be installed on every new version of Node
  mklink default-packages "$NODENV_ROOT/default-packages"
  mklink prettierrc.js "$HOME/.prettierrc.js"
}

update() {
  fetch_nodenv_and_plugins
  nodenv update
  install_latest_node_version_as_global
  uninstall_orphan_node_versions
}

clean() {
  rm -rfv $NODENV_ROOT "$HOME/.prettierrc.js"
}

## Helpers

fetch_nodenv_and_plugins() {
  # NOTE plugins extend the commands available for `nodenv`
  local NODENV_PLUGINS=$NODENV_ROOT/plugins

  _ensure_repo nodenv/nodenv                     $NODENV_ROOT
  # allow me to install virtually any version of Node
  _ensure_repo nodenv/node-build                 $NODENV_PLUGINS/node-build
  # update nodenv as well as all installed nodenv plugins
  _ensure_repo nodenv/nodenv-update              $NODENV_PLUGINS/node-update
  # automatically install npm packages every time you install a new version of Node
  _ensure_repo nodenv/nodenv-default-packages    $NODENV_PLUGINS/nodenv-default-packages
  # installer/updater and doctor scripts for nodenv
  _ensure_repo nodenv/nodenv-installer           $NODENV_PLUGINS/nodenv-installer
  # never run `nodenv rehash` again
  _ensure_repo nodenv/nodenv-package-rehash      $NODENV_PLUGINS/nodenv-package-rehash
  # detects the Node version based on the engines field of the current tree's package.json file
  _ensure_repo nodenv/nodenv-package-json-engine $NODENV_PLUGINS/nodenv-package-json-engine
  # detects the node version based on .nvmrc
  _ensure_repo ouchxp/nodenv-nvmrc               $NODENV_PLUGINS/nodenv-nvmrc
}

install_latest_node_version_as_global() {
  LATEST_NODE_VERSION=$(nodenv install -l | grep -E "^[0-9]+(\.[0-9]+){2}" | sort -V | tail -1)

  if [[ $(nodenv global) != $LATEST_NODE_VERSION ]]; then
    while true; do
      echo
      echo-ask "Would you like to install the latest version of node (v${LATEST_NODE_VERSION}) and set it as global (y/n)? "
      read answer

      case $answer in
        [Yy]* )
          _exec nodenv install -s "$LATEST_NODE_VERSION" && _exec nodenv global "$LATEST_NODE_VERSION"
          [ $? -eq 0 ] && echo-ok "Installed node v${LATEST_NODE_VERSION} as global"
          break
          ;;
        [Nn]* )
          break
          ;;
        * ) echo "Please answer yes or no.";;
      esac
    done
  fi
}

uninstall_orphan_node_versions() {
  # TODO Move this to an env variable so that it can be configurable
  repos_dir=($HOME/dev)

  find_node_versions() {
    find $repos_dir -type f -maxdepth 3 -name '.node-version' -exec cat {} \;
  }

  fd_node_versions() {
    fd -d 3 -H .node-version $repos_dir -x cat {}
  }

  USED_NODE_VERSIONS=$((fd_node_versions 2>/dev/null) || (find_node_versions 2>/dev/null))
  USED_NODE_VERSIONS+="\n$(nodenv global)" 
  # Get, sort and delete duplicates of all node versions used in repositories + global version
  USED_NODE_VERSIONS=$(echo $USED_NODE_VERSIONS | sort -uV)

  INSTALLED_NODE_VERSIONS=$(nodenv versions --bare)
  ORPHAN_NODE_VERSIONS=$(comm -23 <(echo $INSTALLED_NODE_VERSIONS) <(echo $USED_NODE_VERSIONS))
  COUNT_ORPHAN_NODE_VERSIONS=$(echo $ORPHAN_NODE_VERSIONS | awk NF | wc -l)
  ORPHAN_NODE_VERSIONS_ARGS=($(echo "$ORPHAN_NODE_VERSIONS" | tr "\n" " "))

  if [[ $COUNT_ORPHAN_NODE_VERSIONS -ne 0 ]]; then
    echo
    echo-list "Found orphan node versions:"
    echo $ORPHAN_NODE_VERSIONS

    while true; do
      echo
      echo-ask "Do you wish to uninstall all of them (y/n)? "
      read answer

      case $answer in
        [Yy]* )
          _exec nodenv uninstall -f ${ORPHAN_NODE_VERSIONS_ARGS[@]}
          # [ $? -eq 0] && echo-ok ""
          break
        ;;
        [Nn]* )
          break
        ;;
        * ) echo "Please answer yes or no.";;
      esac
    done
  fi
}

init "$@"
