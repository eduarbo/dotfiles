# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#                       ░█▀▄░▀█▀░█▀█░█▀▄░▀█▀░█▀█░█▀▀░█▀▀
#                       ░█▀▄░░█░░█░█░█░█░░█░░█░█░█░█░▀▀█
#                       ░▀▀░░▀▀▀░▀░▀░▀▀░░▀▀▀░▀░▀░▀▀▀░▀▀▀

# For a list of key names, see: GLFW keys
# <http://www.glfw.org/docs/latest/group__keys.html>. The name to use is the
# part after the GLFW_KEY_ prefix. For a list of modifier names, see: GLFW mods
# <http://www.glfw.org/docs/latest/group__mods.html>

# On Linux you can also use XKB key names to bind keys that are not supported by
# GLFW. See XKB keys
# <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
# keysyms.h> for a list of key names. The name to use is the part after the
# XKB_KEY_ prefix. Note that you should only use an XKB key name for keys that
# are not present in the list of GLFW keys.

# Finally, you can use raw system key codes to map keys. To see the system key
# code for a key, start kitty with the kitty --debug- keyboard option. Then
# kitty will output some debug text for every key event. In that text look for
# ``native_code`` the value of that becomes the key name in the shortcut. For
# example:

# .. code-block: none

#     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

# Here, the key name for the A key is 0x61 and you can use it with:

#     map ctrl+0x61 something

# to map ctrl+a to something.

# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.

# You can combine multiple actions to be triggered by a single shortcut, using
# the syntax below:

#     map key combine <separator> action1 <separator> action2 <separator> action3 ...

# For example:

#     map kitty_mod+e combine : new_window : next_layout

# this will create a new window and switch to the next available layout

# You can use multi-key shortcuts using the syntax shown below:

#     map key1>key2>key3 action

# For example:

#     map ctrl+f>2 set_font_size 20


# The value of kitty_mod is used as the modifier for all default shortcuts, you
# can change it in your kitty.conf to change the modifiers for all the default
# shortcuts.
kitty_mod super

# You can have kitty remove all shortcut definition seen up to this point.
# Useful, for instance, to remove the default shortcuts.
clear_all_shortcuts no


# ┏━╸╻  ╻┏━┓┏┓ ┏━┓┏━┓┏━┓╺┳┓
# ┃  ┃  ┃┣━┛┣┻┓┃ ┃┣━┫┣┳┛ ┃┃
# ┗━╸┗━╸╹╹  ┗━┛┗━┛╹ ╹╹┗╸╺┻┛
# Clipboard {{{

# There is also a copy_or_interrupt action that can be optionally mapped to
# Ctrl+c. It will copy only if there is a selection and send an interrupt
# otherwise.
map kitty_mod+c copy_to_clipboard

# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
map kitty_mod+v  paste_from_clipboard
map kitty_mod+p  paste_from_selection
map kitty_mod+g  pass_selection_to_program

#     map kitty_mod+o pass_selection_to_program firefox

# You can pass the current selection to a terminal program running in
# a new kitty window, by using the @selection placeholder:

#     map kitty_mod+y new_window less @selection

# }}}


# ┏━┓┏━╸┏━┓┏━┓╻  ╻  ╻┏┓╻┏━╸
# ┗━┓┃  ┣┳┛┃ ┃┃  ┃  ┃┃┗┫┃╺┓
# ┗━┛┗━╸╹┗╸┗━┛┗━╸┗━╸╹╹ ╹┗━┛
# Scrolling {{{

# You can pipe the contents of the current screen + history buffer as STDIN to
# an arbitrary program using the ``pipe`` function. For example, the following
# opens the scrollback buffer in less in an overlay window:

#     map f1 pipe @ansi overlay less +G -R

# FIXME make yank work
map kitty_mod+shift+f   pipe @screen overlay vim -M -c 'set ft=man nolist' -c 'map q :q!<CR>' -c 'noremap ; :<CR>' -
# map kitty_mod+e         pipe @text overlay vim - +":call cursor($(echo $KITTY_PIPE_DATA | awk -F : '{print $2}'))"

map kitty_mod+f         show_scrollback
map kitty_mod+k         scroll_line_up
map kitty_mod+j         scroll_line_down

map kitty_mod+e         scroll_page_up
map kitty_mod+u         scroll_page_up
map kitty_mod+d         scroll_page_down

map kitty_mod+shift+e   scroll_home
map kitty_mod+shift+u   scroll_home
map kitty_mod+shift+d   scroll_end

# }}}


# ╻ ╻╻┏┓╻╺┳┓┏━┓╻ ╻   ┏┳┓┏━┓┏┓╻┏━┓┏━╸┏━╸┏┳┓┏━╸┏┓╻╺┳╸
# ┃╻┃┃┃┗┫ ┃┃┃ ┃┃╻┃   ┃┃┃┣━┫┃┗┫┣━┫┃╺┓┣╸ ┃┃┃┣╸ ┃┗┫ ┃
# ┗┻┛╹╹ ╹╺┻┛┗━┛┗┻┛   ╹ ╹╹ ╹╹ ╹╹ ╹┗━┛┗━╸╹ ╹┗━╸╹ ╹ ╹
# Window management {{{

# You can open a new window running an arbitrary program, for example:

#     map kitty_mod+y      new_window mutt

# You can open a new window with the current working directory set to the
# working directory of the current window using:

#     map ctrl+alt+enter    new_window_with_cwd

# You can open a new window that is allowed to control kitty via the kitty
# remote control facility by prefixing the command line with @. Any programs
# running in that window will be allowed to control kitty. For example:

#     map ctrl+enter new_window @ some_program

map kitty_mod+n       new_window_with_cwd
map kitty_mod+shift+n new_os_window
map kitty_mod+w       close_window

# TODO Delete forward
# map ctrl+d

map ctrl+h            neighboring_window left
map ctrl+l            neighboring_window right
map ctrl+k            neighboring_window up
map ctrl+j            neighboring_window down

map shift+left        move_window left
map shift+right       move_window right
map shift+up          move_window up
map shift+down        move_window down

map kitty_mod+r       start_resizing_window
map kitty_mod+o       move_window_to_top

map kitty_mod+shift+l move_window_forward
map kitty_mod+shift+j move_window_forward

map kitty_mod+shift+h move_window_backward
map kitty_mod+shift+k move_window_backward

# }}}


# ╺┳╸┏━┓┏┓    ┏┳┓┏━┓┏┓╻┏━┓┏━╸┏━╸┏┳┓┏━╸┏┓╻╺┳╸
#  ┃ ┣━┫┣┻┓   ┃┃┃┣━┫┃┗┫┣━┫┃╺┓┣╸ ┃┃┃┣╸ ┃┗┫ ┃
#  ╹ ╹ ╹┗━┛   ╹ ╹╹ ╹╹ ╹╹ ╹┗━┛┗━╸╹ ╹┗━╸╹ ╹ ╹
# Tab management {{{

# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab and use new_tab_with_cwd. Finally, if you
# want the new tab to open next to the current tab rather than at the end of the
# tabs list, use:

#     map ctrl+t new_tab !neighbor [optional cmd to run]

map kitty_mod+shift+]  next_tab
map kitty_mod+shift+[  previous_tab

map kitty_mod+t        new_tab !neighbor
map kitty_mod+shift+t  new_tab

map kitty_mod+shift+.  move_tab_forward
map kitty_mod+shift+,  move_tab_backward

map kitty_mod+shift+w  close_tab
map kitty_mod+shift+r  set_tab_title

# Tab shorcuts
map kitty_mod+1        goto_tab 1
map kitty_mod+2        goto_tab 2
map kitty_mod+3        goto_tab 3
map kitty_mod+4        goto_tab 4
map kitty_mod+5        goto_tab 5
map kitty_mod+6        goto_tab 6
map kitty_mod+7        goto_tab 7
map kitty_mod+8        goto_tab 8
map kitty_mod+9        goto_tab 9
map kitty_mod+0        goto_tab 0

# go to previous active tab
map kitty_mod+a        goto_tab -1

# }}}


# ╻  ┏━┓╻ ╻┏━┓╻ ╻╺┳╸   ┏┳┓┏━┓┏┓╻┏━┓┏━╸┏━╸┏┳┓┏━╸┏┓╻╺┳╸
# ┃  ┣━┫┗┳┛┃ ┃┃ ┃ ┃    ┃┃┃┣━┫┃┗┫┣━┫┃╺┓┣╸ ┃┃┃┣╸ ┃┗┫ ┃
# ┗━╸╹ ╹ ╹ ┗━┛┗━┛ ╹    ╹ ╹╹ ╹╹ ╹╹ ╹┗━┛┗━╸╹ ╹┗━╸╹ ╹ ╹
# Layout management {{{

# You can also create shortcuts to switch to specific layouts:

#     map ctrl+alt+t goto_layout tall
#     map ctrl+alt+s goto_layout stack

map kitty_mod+l next_layout
map kitty_mod+; last_used_layout

map kitty_mod+z kitten  zoom_toggle.py

map kitty_mod+s>kitty_mod+g goto_layout grid
map kitty_mod+s>kitty_mod+f goto_layout stack
map kitty_mod+s>kitty_mod+k goto_layout tall
map kitty_mod+s>kitty_mod+j goto_layout fat
map kitty_mod+s>kitty_mod+s goto_layout horizontal
map kitty_mod+s>kitty_mod+v goto_layout vertical
# }}}


# ┏━╸┏━┓┏┓╻╺┳╸   ┏━┓╻╺━┓┏━╸┏━┓
# ┣╸ ┃ ┃┃┗┫ ┃    ┗━┓┃┏━┛┣╸ ┗━┓
# ╹  ┗━┛╹ ╹ ╹    ┗━┛╹┗━╸┗━╸┗━┛
# Font sizes {{{

map kitty_mod+]         change_font_size current +2.0
map kitty_mod+[         change_font_size current -2.0
map kitty_mod+backspace change_font_size current 0
map kitty_mod+s>b       change_font_size current 20.0

# }}}


# ┏━┓┏━╸╻  ┏━╸┏━╸╺┳╸   ┏━┓┏┓╻╺┳┓   ┏━┓┏━╸╺┳╸   ┏━┓┏┓╻   ╻ ╻╻┏━┓╻┏┓ ╻  ┏━╸
# ┗━┓┣╸ ┃  ┣╸ ┃   ┃    ┣━┫┃┗┫ ┃┃   ┣━┫┃   ┃    ┃ ┃┃┗┫   ┃┏┛┃┗━┓┃┣┻┓┃  ┣╸
# ┗━┛┗━╸┗━╸┗━╸┗━╸ ╹    ╹ ╹╹ ╹╺┻┛   ╹ ╹┗━╸ ╹    ┗━┛╹ ╹   ┗┛ ╹┗━┛╹┗━┛┗━╸┗━╸
# ╺┳╸┏━╸╻ ╻╺┳╸
#  ┃ ┣╸ ┏╋┛ ┃
#  ╹ ┗━╸╹ ╹ ╹
# Select and act on visible text {{{

# Use the hints kitten to select text and either pass it to an
# external program or insert it into the terminal or copy it to the
# clipboard.

# Open a currently visible URL using the keyboard. The program used to open the
# URL is specified in open_url_with.
map kitty_mod+s>e kitten hints

# Select a path/filename and insert it into the terminal. Useful, for instance
# to run git commands on a filename output from a previous git command.
map kitty_mod+s>f       kitten hints --type path --program -
map kitty_mod+s>shift+f kitten hints --type path --program @

# Select a path/filename and open it with the default open program.
# FIXME Ignore line numbers
map kitty_mod+s>o kitten hints --type path

# Select a line of text and insert it into the terminal. Use for the output of
# things like: ls -1
map kitty_mod+s>l       kitten hints --type line --program -
map kitty_mod+s>shift+l kitten hints --type line --program @

# Select words and insert into terminal.
map kitty_mod+s>w       kitten hints --type word --program -
map kitty_mod+s>shift+w kitten hints --type word --program @

# Select something that looks like a hash and insert it into the terminal.
# Useful with git, which uses sha1 hashes to identify commits
map kitty_mod+s>h       kitten hints --type hash --program -
map kitty_mod+s>shift+h kitten hints --type hash --program @

# The hints kitten has many more modes of operation that you can map
# to different shortcuts. For a full description see kittens/hints.

# }}}


# ┏┳┓╻┏━┓┏━╸┏━╸╻  ╻  ┏━┓┏┓╻┏━╸┏━┓╻ ╻┏━┓
# ┃┃┃┃┗━┓┃  ┣╸ ┃  ┃  ┣━┫┃┗┫┣╸ ┃ ┃┃ ┃┗━┓
# ╹ ╹╹┗━┛┗━╸┗━╸┗━╸┗━╸╹ ╹╹ ╹┗━╸┗━┛┗━┛┗━┛
# Miscellaneous {{{

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+u      kitten unicode_input
# map kitty_mod+f2     edit_config_file
map kitty_mod+s>; kitty_shell window

# Open the kitty shell in a new window/tab/overlay/os_window to
# control kitty using commands.

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default
map kitty_mod+s>kitty_mod+l    clear_terminal scrollback active

# You can create shortcuts to clear/reset the terminal. For example:

#     # Reset the terminal
#     map kitty_mod+f9 clear_terminal reset active
#     # Clear the terminal screen by erasing all contents
#     map kitty_mod+f10 clear_terminal clear active
#     # Clear the terminal scrollback by erasing it
#     map kitty_mod+f11 clear_terminal scrollback active
#     # Scroll the contents of the screen into the scrollback
#     map kitty_mod+f12 clear_terminal scroll active

# If you want to operate on all windows instead of just the current
# one, use all instead of :italic`active`.

# It is also possible to remap Ctrl+L to both scroll the current
# screen contents into the scrollback buffer and clear the screen,
# instead of just clearing the screen:

#     map ctrl+l combine : clear_terminal scroll active : send_text normal,application


# You can tell kitty to send arbitrary (UTF-8) encoded text to the
# client program when pressing specified shortcut keys. For example:

#     map ctrl+alt+a send_text all Special text

# This will send "Special text" when you press the ctrl+alt+a key
# combination.  The text to be sent is a python string literal so you
# can use escapes like \x1b to send control codes or \u21fb to send
# unicode characters (or you can just input the unicode characters
# directly as UTF-8 text). The first argument to send_text is the
# keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated
# combination of them.  The special keyword all means all modes. The
# modes normal and application refer to the DECCKM cursor key mode
# for terminals, and kitty refers to the special kitty extended
# keyboard protocol.

# Another example, that outputs a word and then moves the cursor to
# the start of the line (same as pressing the Home key):

#     map ctrl+alt+a send_text normal Word\x1b[H
#     map ctrl+alt+a send_text application Word\x1bOH

# }}}
